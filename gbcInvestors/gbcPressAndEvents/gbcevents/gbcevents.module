<?php
/**
 * @file Events section
 * @author Miguel MartÃ­nez <miguel01amd@gmail.com>
 * @package Corp - Sections
 * @info Display block and form for "Events" section.
 * @vertion dev 1.0.0
 */

/**
 * Implements hook_block_info().
 *
 * @return mixed
 */
function gbcevents_block_info() {
  $block = [];
  $block['gbcevents_block'] = array(
    'info'       => t('Events Form Section'),
    'title'      => '<none>',
    'status'     => TRUE,
    'region'     => 'content',
    'cache'      => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $block['gbcLatest_block'] = array(
    'info'       => t('Events Latest Block'),
    'title'      => '<none>',
    'status'     => TRUE,
    'region'     => 'content',
    'cache'      => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  return $block;
}

/**
 * Implements hook_block_view().
 *
 * Defines function that sets block view
 */
function gbcevents_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'gbcevents_block':
      drupal_add_js( drupal_get_path('theme', 'corporate') . "/js/controllers/investors/investors_home.js", array('weight' => 5,'scope' => 'footer'));
      drupal_add_js( drupal_get_path('theme', 'corporate') . "/js/controllers/investors/investors_press_events.js", array('weight' => 5,'scope' => 'footer'));
      $block['content'] = array(drupal_get_form('gbcevents_events_form'));
      break;
    case 'gbcLatest_block':
      $block['content'] = _gbcLatestEvents();
      break;
    default:
      break;
  } // end switch
  return $block;
}

/**
 * Implements hook_theme().
 *
 * @see templates
 * @return array
 */
function gbcevents_theme() {
  $theme = [];
  $theme['gbcevents_events_form'] = array(
    'render element' => 'form',
    'template'       => 'templates/gbceventsform',
  );
  $theme['eventos_search'] = array(
    'variables' => array(),
    'template'  => 'templates/gbcResultsEvents',
  );
  $theme['events_theme_tpl'] = array(
    'variables' => array(),
    'template'  => 'templates/gbcEvents',
  );
  return $theme;
}

/**
 * Get all  description to display menu
 *
 * @return string
 */
function gbcevents_events_form() {
  $years = create_years();
  $quarterly = get_quarterly();
  $arr_years = array(0 => t('All years')) + $years;
  $arr_quarterly = array(0 => t('All Quarterly')) + $quarterly;
  $form = array();
  $form['eventos'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'data-name' => array(t('Event name')),
      'placeholder' => array(t('Event name')),
    ),
    '#prefix' => '<li id="stringSearchInput">',
    '#suffix' => '</li>',
  );
  $form['years'] = array(
    '#type' => 'select',
    '#options' => $arr_years,
    '#attributes' => array(
      'data-name' => array(t('Year')),
      'id' => array('yearEvent'),
    ),
    '#prefix' => '<li id="anoFact">',
    '#suffix' => '</li>',
  );
  $form['quarterly'] = array(
    '#type' => 'select',
    '#options' => $arr_quarterly,
    '#attributes' => array(
      'data-name' => array(t('All Quarterly')),
      'id' => array('trimesterEvent'),
    ),
    '#prefix' => '<li id="trimestreFact">',
    '#suffix' => '</li>',
  );
  $form['sumbit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array(
      'class' => array('btn-default search'),
    ),
    '#prefix' => '<li id="searchFactBtn">',
    '#suffix' => '</li>',
    '#ajax' => array(
      'callback' => '_eventos_search_submit_ajax',
    ),
  );

  $form['#id'] = 'gbcevents_events_form';
  $form['#theme'] = 'gbcevents_events_form';
  $form['#theme_wrappers'] = array('form');

  return $form;
}

/**
 * Get all  description to display menu
 *
 * @return string
 */
function _gbcLatestEvents() {
  $content  = [];
  $language = _gbcCommon_language();
  $link_invitation = ($language == 'en') ? 'node/1209': 'node/1209';
  $link_announcments = ($language == 'en') ? 'node/1207': 'node/766';
  $query = db_select('node', 'n');
  $query->join('field_data_field_date','fdfd','fdfd.entity_id = n.nid');
  $query->join('field_data_field_location','fdfl','fdfl.entity_id = n.nid');
  $query->join('field_data_field_event_schedule','fdfes','fdfes.entity_id = n.nid');
  $data = $query
        ->fields('n',array('title','nid'))
        ->fields('fdfd',array('field_date_value','field_date_value2'))
        ->fields('fdfl',array('field_location_value'))
        ->fields('fdfes', array('field_event_schedule_value'))
        ->condition('n.type', 'events')
        ->condition('n.status',1)
        ->condition('n.language',$language)
        ->orderBy('n.nid', 'DESC')
        ->extend('PagerDefault')
        ->element('0')
        ->limit(1)
        ->execute()->fetchAll();

  if (count($data)<=0) {
    return array();
  } // end if

  foreach ($data as $result) {
    $content['data'][] = array(
      'title' => $result->title,
      'nid' => $result->nid,
      'date_start' => $result->field_date_value,
      'date_end' => $result->field_date_value2,
      'location' => $result->field_location_value,
      'event_schedule' => $result->field_event_schedule_value,
    );
  } // end foreach
  $content['pager'] = theme('pager');
  return theme('events_theme_tpl', array('content' => $content,'link_announcments' => $link_announcments,'link_invitation' => $link_invitation));
}


/**
 * Only render content and validates return
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function _eventos_search_submit_ajax($form, $form_state) {
  $evento = '';
  $evento = $form_state['values']['eventos'];
  (int)$month = $form_state['values']['quarterly'];
  (int)$years = $form_state['values']['years'];

  $search_eventos = get_eventos($evento, $month, $years);
  if (count($search_eventos) <= 0) {
    $output = t('No data results');
  } else {
    $output = theme('eventos_search', array('searcheventos' => $search_eventos));
  }//END if

  $selector = '#bimbo_eventos';
  $commands[] = ajax_command_replace($selector, '<div class="events-list complete" id="bimbo_eventos">' . $output . '</div>');

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Return all data from "Events" and "Press release" documents
 *
 *
 */
function get_eventos($evento, $month, $year) {
  global $base_url;
  $language = _gbcCommon_language();

  // Merge events and press releases documents
  $query = db_select('node', 'n');
  $query->join('field_data_field_date','fdfd','fdfd.entity_id = n.nid');
  $query->join('field_data_field_location','fdfl','fdfl.entity_id = n.nid');
  $query->join('field_data_field_event_schedule','fdfes','fdfes.entity_id = n.nid');
  $query->join('taxonomy_index', 'ti', 'ti.nid = n.nid');
  $query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ti.tid');
  $query->fields('n',array('title','nid'));
  $query->fields('fdfd',array('field_date_value','field_date_value2'));
  $query->fields('fdfl',array('field_location_value'));
  $query->fields('fdfes', array('field_event_schedule_value'));
  $query->condition('n.type', 'events');
  $query->condition('n.status',1);
  $query->condition('n.language',$language);

  if($evento != ''){
    $query->condition('n.title','%' . $evento . '%','LIKE');
  } // end if
  if($month != 0){
    $query->condition('ttd.tid',$month);
  } // end if
  if($year != 0){
    $query->where('YEAR(fdfd.field_date_value) = :created', array(':created' => $year));
  } // end if

  //$query = $query->extend('PagerDefault');
  $eventos = $query->orderBy('n.nid', 'DESC')->distinct()->execute()->fetchAll();

  if (count($eventos)<=0) {
    return array();
  } // end if

  $array_eventos = array();

  foreach ($eventos as $evento) {
    $array_eventos[] = array(
      'title' => $evento->title,
      'nid' => $evento->nid,
      'date_start' => $evento->field_date_value,
      'date_end' => $evento->field_date_value2,
      'location' => $evento->field_location_value,
      'event_schedule' => $evento->field_event_schedule_value,
    );
  } // end foreach
  //return array('eventos' => $array_eventos, 'paging' => $paging);
  return array('eventos' => $array_eventos);
}

/**
 * Function to create dynamically years
 */
function create_years() {
  $firstYear = (int)date('Y') - 18;
  $lastYear = $firstYear + 18;
  $arr_year = array();
  for ($y = $lastYear; $y > $firstYear; $y--) {
    $arr_year[$y] = $y;
  } // end for

  return $arr_year;
}

/**
 *
 *
 **/
function get_quarterly() {
  $language = _gbcCommon_language();
  (int)$vid = 54;
  $query = db_select('taxonomy_term_data','ttd');
  $query->join('taxonomy_vocabulary','tv', 'tv.vid = ttd.vid');
  $query->fields('ttd', array('name','tid'));
  $query->condition('ttd.language',$language);
  $query->condition('ttd.vid',$vid);
  $data = $query
        ->orderBy('ttd.weight', 'ASC')
        ->execute()->fetchAll();

  if (count($data)<=0) {
    return array();
  } // end if

  foreach ($data as $item) {
    $quarterly_arr[$item->tid] = $item->name;
  } // end foreach
  return $quarterly_arr;
}
